{
  "hash": "44ab9c1545f1ba4637f02c963eb2dfc9",
  "result": {
    "markdown": "---\ntitle: \"Python Basics\"\nsubtitle: \"A quick look at the basics of python programming\"\nauthor: 'Daniel Noone'\ndate: '02-10-2024'\ncategories: [Python]\nimage: py.jfif\n\nhighlight-style: monokai\nfig-width: 9\n\ntoc: TRUE\ntoc-title: 'Table of Contents'\ntoc-depth: 2\nnumber-sections: true\n\nexecute:\n  code-tools: true\n  message: false\n  warning: false\n---\n\n# Introduction\n\nThis blog post is meant to give a brief introduction of some of the main topics in basic python programming\n\n# Variables & Assignment\n\n  * In python programming, variables are just names for values not actual storage places. <br>\n\n  * These values can be singular such as a numeric value of 10, but there can also be multiple values of the same or varying data types <br>\n\n  * an equal sign `=` is used to assign values to their respective variables (or objects)\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Single value\nx = 10\n\n# Multiple values\ny = [1,2,3]\n\n#Multiple types\nz = ['a','b','c',1,2,3]\n```\n:::\n\n\n# Data Types in Python\n\nThere are multiple different data types recognized by the python language.\n\nThe most basic types are as follows:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Integer, numeric values with no decimals\nx = 10\n\n# Float, numeric values with decimals\ny = 10.99\n\n# String, character values surrounded by '' or \"\"\nz = 'hello, world' #OR \nz = \"hello, world\"\n\n# Boolean, logical values\nx = True\ny = False\n\n# Nothing, no value\nz = None\n\n# List, data container for any data type (even multiple types at once)\nlist_ = [10, 1.55, 'apple', True, False, None]\n\n# Tuple, non mutable data container\ntup = (2, 3 , 4)\n\n# Set\nset_ = {'a', 'b'}\n\n# Dictionary\ndict_ = {'first': 'a', 'second': 'b'}\n```\n:::\n\n\n# Operators\n\nMathematical operations can also be done in python using preset operators:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Addition\nx = 5 + 5 # x would have value of 10\ny = x + 5 # y would have value of 15\n\n# Subtraction\nx = 5 - 1 # x would have value of 4\ny = x - 2 # y would have value of 2\n\n# Multiplication and Exponents (* for multiplication, ** for exponents)\nx = 5 * 2**2 # x would have value of 20\ny = x**2 * 5 # y would have value of 2000\n\n# Division and Integer Division (if want int type out of operation, use //)\nx = 4/2 # x would have value of 2.0\ny = x/2 # y would have value of 1.0\n\nx = 8//2 # x would have value of 4 (int type not float)\ny = x//2 # y would have value of 2 (again, int not float)\n\n# Can also perform string concatenation\nstr_one = 'hello,'\nstr_two = ' world'\nstr_ = str_one + str_two # Result of summation is concatenation of str_one and str_two \n                          # = 'hello, world'\n```\n:::\n\n\n# Conditionals\n\nCan perform conditional operations in python\n\n  * If statements\n  * If else\n  * etc...\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Can use if and elif and else to formulate conditional operations\n# For example...\n\nname = 'David'\nscore = 99\n\nif name == 'David' and score >= 90:\n  print('Great job, David!')\nelif name != 'David' and score >= 90:\n  print('Great job, stranger!')\nelif name == 'David' and score < 90:\n  print('You failed, David!')\nelif name != 'David' and score < 90:\n  print('You failed, stranger!')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGreat job, David!\n```\n:::\n:::\n\n\n-> Here the result is `'Great job, David!'` since the name is `'David'` and the score is `99`\n\n# Casting Variables\n\nCasting is when we explicitly assign a data type to a variable\n\n  * `str()` will convert to string type\n  * `int()` will convert to integer type\n  * `float()` will convert to float type\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nx = 10 # integer type\ny = '20' # string type\nz = 1.55 # float type\n\nx_ = float(x) # makes 10 into float type = 10.0\ny_ = int(y) # makes '20' into int type = 20\nz_ = int(z) # makes 1.55 into int type = 1 (DOES NOT ROUND)\nx_str = str(x) # makes 10 into str type = '10'\n```\n:::\n\n\n# Slicing Methods\n\n  * Python uses indexing to slice data\n  * The index starts at 0, **not 1**\n  \n  ![](slice.jfif)\n\n  * As seen in the image, negative values can also be used\n\n  * The syntax is as follows\n    * `[:]`       - will return the whole value\n    * `[start :]` - will return from a starting index value until the end\n    * `[: end]`   - will return from the start until the end index value\n    * `[start : end]` - Will return from start value to end value\n    * `[start : end: step]` - will return from start to end by a certain step amount\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nstring = 'abcdefghij'\n\nstring[:5] # returns 'abcde' (first 5 characters of string)\nstring[5:] # returns 'fghij' (last 5 characters of string)\nstring[0:5:2] # returns 'ace' (first 5 characters, but in steps of 2)\n\nlist_ = ['apple','banana','pear','strawberry','papaya','pineapple']\n\nlist_[:3] # returns ['apple', 'banana', 'pear'] (first 3 elements of list)\nlist_[3:] # returns ['strawberry', 'papaya', 'pineapple'] (last 3 elements of list)\nlist_[0::2] # returns ['apple', 'pear', 'papaya'] (whole list by steps of 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n['apple', 'pear', 'papaya']\n```\n:::\n:::\n\n\n# Importing Modules, Packages and Libraries\n\n  * `Module` - a bunch of related code saved in a file with extension .py\n  * `Package` - directory of a collection of modules\n  * `Library` - a collection of packages\n  \n  \n  * `import` is called on a module to be able to use it\n    * Then have to call module along with any functions associated\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport pandas\n# could then use pandas.read_csv() to read a csv\n```\n:::\n\n\n  * `import` `as` is called on a module to give it a name to make things more efficient\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nimport pandas as pd\n# Then could use pd.read_csv() instead of pandas.read_csv()\n```\n:::\n\n\n  * `from` and `import` is used to load a specific function from a module\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfrom pandas import read_csv\n# then can just use read_csv() as if it were a base function\n```\n:::\n\n\n  * In order to install a module, package or library - have to call `pip install` in terminal or `!pip install` if on Google Colab\n    * !pip install is also used for Rstudio\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# !pip install itables\n```\n:::\n\n\n",
    "supporting": [
      "python_basics_HW1_files"
    ],
    "filters": [],
    "includes": {}
  }
}